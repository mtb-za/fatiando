Filename: /home/leo/src/fatiando/fatiando/fatiando/gravmag/_prism_numpy.py

Line #    Mem usage    Increment   Line Contents
================================================
   130     81.2 MiB      0.0 MiB   def gz(xp, yp, zp, prisms, dens=None):
   131     81.2 MiB      0.0 MiB       res = numpy.zeros_like(xp)
   132     82.1 MiB      0.9 MiB       for prism in prisms:
   133     82.1 MiB      0.0 MiB           if prism is None or ('density' not in prism.props and dens is None):
   134                                         continue
   135     82.1 MiB      0.0 MiB           if dens is None:
   136     82.1 MiB      0.0 MiB               density = prism.props['density']
   137                                     else:
   138                                         density = dens
   139                                     # First thing to do is make the computation point P the origin of the
   140                                     # coordinate system
   141     82.1 MiB      0.0 MiB           x = [prism.x2 - xp, prism.x1 - xp]
   142     82.1 MiB      0.0 MiB           y = [prism.y2 - yp, prism.y1 - yp]
   143     82.1 MiB      0.0 MiB           z = [prism.z2 - zp, prism.z1 - zp]
   144                                     # Evaluate the integration limits
   145     82.1 MiB      0.0 MiB           for k in range(2):
   146     82.1 MiB      0.0 MiB               for j in range(2):
   147     82.1 MiB      0.0 MiB                   for i in range(2):
   148     82.1 MiB      0.0 MiB                       r = sqrt(x[i]**2 + y[j]**2 + z[k]**2)
   149                                                 # Minus because Nagy et al (2000) give the formula for the
   150                                                 # gradient of the potential. Gravity is -grad(V)
   151                                                 kernel = -(x[i]*safe_log(y[j] + r)
   152                                                            + y[j]*safe_log(x[i] + r)
   153     82.1 MiB      0.0 MiB                                  - z[k]*safe_atan2(x[i]*y[j], z[k]*r))
   154     82.1 MiB      0.0 MiB                       res += ((-1.)**(i + j + k))*kernel*density
   155                                 # Now all that is left is to multiply res by the gravitational constant and
   156                                 # convert it to mGal units
   157     82.1 MiB      0.0 MiB       res *= G*SI2MGAL
   158     82.1 MiB      0.0 MiB       return res